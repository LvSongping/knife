使用场景
========

### 如何在运行时改变某个变量的值。

### 如何找到被吃掉的异常？




### 如何诊断内存泄漏

常规的做法一般是先使用jmap命令生成jvm的heapdump，然后把heapdump文件导到本地用相关工具打开。

有时候会因为本地内存不够打不开，也有时候因为要跟踪内存变化不得不多次heapdump，需要多次传输文件。

knife提供了分析这种问题的另一种思路，在运行时直接分析堆内存的结构。

内存泄漏的表现形式往往是某些对象创建后无法回收，因为有其他对象保存着它的引用，这类对象达到一定数量就会造成Outofmemory。

根据诊断的经验，保存这些对象引用的对象往往是同一个或同一类对象，比如list、map等集合类。 因此这个问题就转变为如何搞清楚那些保存其他对象引用数最多的对象是干嘛的。

knife提供了"top thread"命令用于查找堆内存中保存其他对象引用数最多的对象。 可以设置"-n 数量"参数，控制结果集的数量，默认会返回保存引用数做多的那10个对象。

![](top_ref.png)

从结果中看到objectid为13的对象拥有最多的845个其他对象的引用。

接下来可以使用"ref 13"命令来查看是哪些对象引用了了13号对象，这样就可以找出问题出在哪一段逻辑里。

![](top_ref_2.png)

![](top_ref_3.png)

原来这些对象是被AppClassLoader引用了。可以看到是25号对象就是AppClassLoader中的classes属性。 那845个引用就是AppClassLoader对其加载的所有class的引用。

可以看到返回结果中有些名字为"KNIFE_OBJECT_HOLDER"的对象，这是knife在分析时保存的对这些对象的引用，可以忽略(可以使用"clear"命令清除所有这些引用)。

也可以使用"ls -a -n 10 13"命令直接查看13号数组里面的元素都是些什么。为了避免显示输出过多，可以使用"-n 10"参数指定只返回前10个元素。

![](top_ref_4.png)

这样就可以直接判断出数组13中存放的就是已加载的class。
